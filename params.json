{"name":"Humanize","body":"# Humanize for Java\r\n\r\nHumanize is a Java facility for adding a \"human touch\" to data. It is thread-safe and supports per-thread internationalization. Additionally provides a concise facade to access i18n text formatters.\r\n\r\n## Getting Started\r\n\r\nThe project is not yet available in any public Maven repository, so you can [fork it on Github](https://help.github.com/articles/fork-a-repo)  or download the jar package from the [project downloads](https://github.com/mfornos/humanize/downloads) section.\r\n\r\n## Runtime Dependencies\r\n\r\nHumanize has no runtime dependencies besides JRE 1.6.\r\n\r\n## Usage\r\n\r\nUsing Humanize is dead simple. \r\n\r\n1. Import the static methods of Humanize class that you plan to call\r\n1. Invoke the methods.\r\n\r\nE.g.\r\n\r\n```java\r\n    import static org.nikko.humanize.Humanize.binaryPrefix; \r\n \r\n    class SomeClass {\r\n      void doSomething() {\r\n         String size = binaryPrefix(1325899906842624L);\r\n      }\r\n    }\r\n```\r\n\r\n## Principal Methods\r\n\r\nAll methods support internationalization. The table listings shows outputs for en_GB locale as reference.\r\n\r\n### Date&Time\r\n\r\n<table>\r\n<tr>\r\n<th>Method </th>\r\n\t\t<th>Description </th>\r\n\t\t<th>Output </th>\r\n\t</tr>\r\n<tr>\r\n<td> naturalDay </td>\r\n\t\t<td> For dates that are the current day or within one day, return ‘today’,‘tomorrow’ or ‘yesterday’, as appropriate. </td>\r\n\t\t<td> ‘today’, ‘tomorrow’, ‘yesterday’ or the date formatted </td>\r\n\t</tr>\r\n<tr>\r\n<td> naturalTime </td>\r\n\t\t<td> Computes both past and future relative dates. </td>\r\n\t\t<td> ‘one day ago’, ‘one day from now’, ‘10 years ago’, ‘3 minutes from now’, ‘right now’, etc. </td>\r\n\t</tr>\r\n</table>\r\n\r\n### Numbers\r\n\r\n<table>\r\n<tr>\r\n<th>Method </th>\r\n\t\t<th>Description </th>\r\n\t\t<th>Output </th>\r\n\t</tr>\r\n<tr>\r\n<td> ordinalize </td>\r\n\t\t<td> Converts a number to its ordinal as a string. </td>\r\n\t\t<td> ‘1st’, ‘2nd’, ‘3rd’, etc. </td>\r\n\t</tr>\r\n<tr>\r\n<td> spellBigNumber </td>\r\n\t\t<td> Converts a big number to a friendly text representation. </td>\r\n\t\t<td> ‘2.3 thousand’, ‘1 million’, ‘-1.55 billion’, ‘3 decillion’, ‘2 googol’, etc. </td>\r\n\t</tr>\r\n<tr>\r\n<td> spellDigit </td>\r\n\t\t<td> For decimal digits, returns the number spelled out. </td>\r\n\t\t<td> ‘one’, ‘two’, ‘three’, etc. </td>\r\n\t</tr>\r\n</table>\r\n\r\n### Units\r\n\r\n<table>\r\n<tr>\r\n<th>Method </th>\r\n\t\t<th>Description </th>\r\n\t\t<th>Output </th>\r\n\t</tr>\r\n<tr>\r\n<td> binaryPrefix </td>\r\n\t\t<td> Converts a given number to a string preceded by the corresponding binary International System of Units (SI) prefix. </td>\r\n\t\t<td> ‘2 bytes’, ‘1.5 kB’, ‘5.00 MB’, ‘1.18 PB’, etc. </td>\r\n\t</tr>\r\n<tr>\r\n<td> formatCurrency </td>\r\n\t\t<td> Smartly formats the given number as a monetary amount. </td>\r\n\t\t<td> ‘£34’, ‘£1,000’, ‘£12.50’, etc. </td>\r\n\t</tr>\r\n</table>\r\n\r\n### Text\r\n\r\n<table>\r\n<tr>\r\n<th>Method </th>\r\n\t\t<th>Description </th>\r\n\t\t<th>Output </th>\r\n\t</tr>\r\n<tr>\r\n<td> pluralize </td>\r\n\t\t<td> Constructs a message with pluralization logic by the means of ChoiceFormat. </td>\r\n\t\t<td> – </td>\r\n\t</tr>\r\n<tr>\r\n<td> uncamelize </td>\r\n\t\t<td> Converts a camel case string into a human-readable name. </td>\r\n\t\t<td> – </td>\r\n\t</tr>\r\n<tr>\r\n<td> titleize </td>\r\n\t\t<td> Capitalize all the words, and replace some characters in the string to create a nice looking title. </td>\r\n\t\t<td> – </td>\r\n\t</tr>\r\n<tr>\r\n<td> wordWrap </td>\r\n\t\t<td> Truncate a string to the closest word boundary after a number of characters. </td>\r\n\t\t<td> – </td>\r\n\t</tr>\r\n</table>\r\n\r\n## Examples\r\n\r\nSee `src/test/HumanizeTest` for examples.\r\n\r\n\r\n## Epilog\r\n\r\nHave fun and stay fresh!","tagline":"Java facility for adding a “human touch” to data.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}