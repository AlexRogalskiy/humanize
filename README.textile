h1. Humanize for Java

Humanize is a Java facility for adding a "human touch" to data. It is thread-safe and supports per-thread internationalization. 

Exists in two flavors: *humanize-slim* and *humanize-icu*. Humanize-slim only depends on guava and standard Java APIs while humanize-icu provides a concise facade for access to the "International Components for Unicode":http://icu-project.org/ (ICU) Java APIs.

h2. Getting Started

h3. Maven

For the *slim flavor* write the following in your _pom_:

bc.. <dependency>
  <groupId>com.github.mfornos</groupId>
  <artifactId>humanize-slim</artifactId>
  <version>0.1.2</version>
</dependency>

p. For the *full-fledged ICU* distribution:

bc.. <dependency>
  <groupId>com.github.mfornos</groupId>
  <artifactId>humanize-icu</artifactId>
  <version>0.1.2</version>
</dependency>

p. 

h2. Dependencies

h3. Humanize-slim

* Only depends on guava 12.0

h3. Humanize-icu

* humanize-slim 0.1.2
* icu4j 49.1

_If you need customize the data included by default in the ICU distribution (all features and languages ~7.1MB), the "ICU Data Library Customizer":http://apps.icu-project.org/datacustom/ may be useful._

h2. Usage

Using Humanize is dead simple. See the javadoc "documentation":http://mfornos.github.com/humanize/apidocs/index.html

# Import the static methods of the Humanize class that you want to call.
# Invoke these methods.

bc.. import static humanize.Humanize.binaryPrefix;
 
class SomeClass {

  void doSomething() {
  
    String size = binaryPrefix(1325899906842624L); // 1.18 PB
    
  }
  
}

h2. Principal Methods

h3. Date&Time

|_. Method |_. Description |_. Output |
| naturalDay | For dates that are the current day or within one day, return 'today','tomorrow' or 'yesterday', as appropriate. | 'today', 'tomorrow', 'yesterday' or the date formatted |
| naturalTime | Computes both past and future relative dates. | '2 days from now', '10 years ago', '3 minutes from now', etc. |
| duration | Formats a number of seconds as hours, minutes and seconds. | '1 sec.', '1:02:10', etc.|
| smartDateFormat | Guesses the best locale-dependent pattern to format the date/time fields that the skeleton specifies. | skeleton 'MMMd' produces '11 Dec.' |

h3. Numbers

|_. Method |_. Description |_. Output |
| ordinal | Converts a number to its ordinal as a string. | '1st', '2nd', '3rd', etc. |
| spellBigNumber | Converts a big number to a friendly text representation. | '2.3 thousand', '1 million', '-1.55 billion', '3 decillion', '2 googol', etc. |
| spellDigit | For decimal digits, returns the number spelled out. | 'one', 'two', 'three', etc. |
| spellNumber | Converts the given number to words. | 'twenty-three', 'two thousand eight hundred and forty', 'one million four hundred and twelve thousand six hundred and five', etc.  |

h3. Units

|_. Method |_. Description |_. Output |
| binaryPrefix | Converts a given number to a string preceded by the corresponding binary International System of Units (SI) prefix. | '2 bytes', '1.5 kB', '5 MB', '1.18 PB', etc. |
| metricPrefix | Converts a given number to a string preceded by the corresponding decimal multiplicative prefix.  | '100k', '1M', '3.5M', etc.  |
| formatCurrency | Smartly formats the given number as a monetary amount. | '£34', '£1,000', '£12.50', etc. |
| formatPluralCurrency | Smartly formats the given number as a monetary amount in plural form. | '34 British pounds sterling', '1,500.55 British pounds sterling', '1 euro', etc. |
| formatPercent | Formats the given ratio as a percentage. | '500%', '56%', etc.  |

h3. Text

|_. Method |_. Description |_. Output |
| pluralize | Constructs a message with pluralization logic by the means of ChoiceFormat. Refer to _messageFormatInstance_ for pluralization using CLDR Plural Rules. | - |
| camelize | Makes a phrase camel case. Spaces and underscores will be removed.  | - |
| capitalize | Capitalizes a string (first letter uppercase and the rest lowercase). | - |
| decamelize | Converts a camel case string into a human-readable name. | - |
| titleize | Capitalize all the words, and replace some characters in the string to create a nice looking title. | - |
| mask | Formats the given text with the mask specified. | for '12345G' with mask '__ ___/_' produces '12 345/G' |
| wordWrap | Truncate a string to the closest word boundary after a number of characters. | - |
| messageFormatInstance | Returns an ICU based MessageFormat instance for the current thread. | - |
| replaceSupplementary | Replaces characters outside the Basic Multilingual Plane with their name. | 'SMILING FACE WITH SMILING EYES' for the corresponding Emoji char |

h2. Supported languages

All languages supported by the ICU APIs.

For capabilities not backed by ICU there are support for 'en' and 'es'.

h2. Examples

See @src/test/.../HumanizeTest@ for examples.

h2. Build Status

!https://secure.travis-ci.org/mfornos/humanize.png?branch=master(Build Status)!:http://travis-ci.org/mfornos/humanize

h2. Epilog

Have fun and stay fresh!

