h1. Humanize for Java !https://secure.travis-ci.org/mfornos/humanize.png?branch=master(Build Status)!:http://travis-ci.org/mfornos/humanize

Humanize is a Java facility for adding a "human touch" to data. It is thread-safe and supports per-thread internationalization. 

Exists in two flavors: *humanize-slim* and *humanize-icu*. Humanize-slim only depends on guava and standard Java APIs while humanize-icu provides a concise facade for access to the "International Components for Unicode":http://icu-project.org/ (ICU) Java APIs.

h2. Getting Started

h3. Maven

Current version:

bc.. <humanize.version>0.1.5</humanize.version>

p. For the *slim flavor* write the following in your _pom_:

bc.. <dependency>
  <groupId>com.github.mfornos</groupId>
  <artifactId>humanize-slim</artifactId>
  <version>${humanize.version}</version>
</dependency>

p. For the *full-fledged ICU* distribution:

bc.. <dependency>
  <groupId>com.github.mfornos</groupId>
  <artifactId>humanize-icu</artifactId>
  <version>${humanize.version}</version>
</dependency>

p. 

h2. Dependencies

h3. Humanize-slim

* Only depends on guava 13.0

h3. Humanize-icu

* humanize-slim ${humanize.version}
* icu4j 50.1

_If you need customize the data included by default in the ICU distribution (all features and languages ~7.1MB), the "ICU Data Library Customizer":http://apps.icu-project.org/datacustom/ may be useful._

h2. Usage

Humanize usage is quite simple.

# Import the static methods of the Humanize class that you want to call.
# Invoke these methods.

bc.. import static humanize.Humanize.binaryPrefix;
 
class SomeClass {

  void doSomething() {
  
    String size = binaryPrefix(1325899906842624L); // 1.18 PB
    
  }
  
}

p. 

h2. Cache configuration

By default the caches are configured to expire after 1 hour past the last access. If you want to change this behavior you need to provide a @humanize.properties@ file, or specify the location of a properties file using the @humanize.config@ system property, with a CacheBuilderSpec string configuration like this:

bc.. cache.builder.spec:expireAfterAccess=15m

p. The value must follow the CacheBuilderSpec syntax. The string syntax is a series of comma-separated keys or key-value pairs, each corresponding to a CacheBuilder method.

* concurrencyLevel=[integer]: sets CacheBuilder.concurrencyLevel.
* initialCapacity=[integer]: sets CacheBuilder.initialCapacity.
* maximumSize=[long]: sets CacheBuilder.maximumSize.
* maximumWeight=[long]: sets CacheBuilder.maximumWeight.
* expireAfterAccess=[duration]: sets CacheBuilder.expireAfterAccess(long, java.util.concurrent.TimeUnit).
* expireAfterWrite=[duration]: sets CacheBuilder.expireAfterWrite(long, java.util.concurrent.TimeUnit).
* refreshAfterWrite=[duration]: sets CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit).
* weakKeys: sets CacheBuilder.weakKeys().
* softValues: sets CacheBuilder.softValues().
* weakValues: sets CacheBuilder.weakValues().

Durations are represented by an integer, followed by one of "d", "h", "m", or "s", representing days, hours, minutes, or seconds respectively. (There is currently no syntax to request expiration in milliseconds, microseconds, or nanoseconds.) 

h2. Javadoc

* "Documentation for humanize-slim":http://mfornos.github.com/humanize/humanize-slim-apidocs/index.html
* "Documentation for humanize-icu":http://mfornos.github.com/humanize/humanize-icu-apidocs/index.html

h2. Examples

h3. Date&Time

bc.. naturalTime(new Date()); // == "right now"
naturalTime(new Date(1000 * 60 * 60 * 24 * 1), new Date(0)); // == "one day ago"
naturalTime(new Date(0), new Date(1000 * 60 * 60 * 24 * 1)); // == "one day from now"

p. 

h3. Text

p. *Pluralize*

bc.. MessageFormat msg = pluralize("There {0} on {1}.::are no files::is one file::are {2} files");
msg.render(0, "disk");    // == "There are no files on disk."
msg.render(1, "disk");    // == "There is one file on disk."
msg.render(1000, "disk"); // == "There are 1,000 files on disk."

bc.. MessageFormat msg = pluralize("nothing::one thing::{0} things");
msg.render(-1); // == "nothing"
msg.render(0);  // == "nothing"
msg.render(1);  // == "one thing"
msg.render(2);  // == "2 things"

bc.. MessageFormat msg = pluralize("one thing::{0} things");
msg.render(-1); // == "-1 things"
msg.render(0);  // == "0 things"
msg.render(1);  // == "one thing"
msg.render(2);  // == "2 things"

p. *Slugify*

bc.. slugify("Cet été, j’en ai rien à coder"); // == "cet-ete-jen-ai-rien-a-coder" 

p. *Interpolation*

bc.. EmojiInterpolator.interpolate(
        "<img src=\"imgs/{0}.png\" title=\"{0}\" />;", 
        "Hi :sparkles:!"); 

// == "Hi <img src=\"imgs/sparkles.png\" title=\"sparkles\" />!"

h3. More

p. _See @src/test/.../HumanizeTest@ for complete examples._

h2. Principal Methods

h3. Date&Time

|_. Method |_. Description |_. Output |_. Slim |_. ICU |
| naturalDay | For dates that are the current day or within one day, return 'today','tomorrow' or 'yesterday', as appropriate. | 'today', 'tomorrow', 'yesterday' or the date formatted | ✔ | ✔ |
| naturalTime | Computes both past and future relative dates. | '2 days from now', '10 years ago', '3 minutes from now', etc. | ✔ | ✔ |
| nanoTime | Formats a number of nanoseconds as the proper ten power unit. | '1.5µs', '10.51ms', '30ns', etc. | ✔ | - |
| duration | Formats a number of seconds as hours, minutes and seconds. | '1 sec.', '1:02:10', etc.| - | ✔ |
| smartDateFormat | Guesses the best locale-dependent pattern to format the date/time fields that the skeleton specifies. | skeleton 'MMMd' produces '11 Dec.' | - | ✔ |

h3. Numbers

|_. Method |_. Description |_. Output |_. Slim |_. ICU |
| ordinal | Converts a number to its ordinal as a string. | '1st', '2nd', '3rd', etc. | ✔ | ✔ |
| spellBigNumber | Converts a big number to a friendly text representation. | '2.3 thousand', '1 million', '-1.55 billion', '3 decillion', '2 googol', etc. | ✔ | - |
| spellDigit | For decimal digits, returns the number spelled out. | 'one', 'two', 'three', etc. | ✔ | - |
| spellNumber | Converts the given number to words. | 'twenty-three', 'two thousand eight hundred and forty', 'one million four hundred and twelve thousand six hundred and five', etc.  | - | ✔ |

h3. Units

|_. Method |_. Description |_. Output |_. Slim |_. ICU |
| binaryPrefix | Converts a given number to a string preceded by the corresponding binary International System of Units (SI) prefix. | '2 bytes', '1.5 kB', '5 MB', '1.18 PB', etc. | ✔ | - |
| metricPrefix | Converts a given number to a string preceded by the corresponding decimal multiplicative prefix.  | '100k', '1M', '3.5M', etc.  | ✔ | - |
| formatCurrency | Smartly formats the given number as a monetary amount. | '£34', '£1,000', '£12.50', etc. | ✔ | ✔ |
| formatPluralCurrency | Smartly formats the given number as a monetary amount in plural form. | '34 British pounds sterling', '1,500.55 British pounds sterling', '1 euro', etc. | - | ✔ |
| formatPercent | Formats the given ratio as a percentage. | '500%', '56%', etc.  | ✔ | ✔ |

h3. Text

|_. Method |_. Description |_. Output |_. Slim |_. ICU |
| pluralize | Constructs a message with pluralization logic by the means of ChoiceFormat. Refer to _messageFormatInstance_ for pluralization using CLDR Plural Rules. | - | ✔ | - |
| camelize | Makes a phrase camel case. Spaces and underscores will be removed.  | - | ✔ | - |
| capitalize | Capitalizes a string (first letter uppercase and the rest lowercase). | - | ✔ | - |
| decamelize | Converts a camel case string into a human-readable name. | - | ✔ | - |
| titleize | Capitalize all the words, and replace some characters in the string to create a nice looking title. | - | ✔ | - |
| transliterate | Strips diacritic marks. | - | ✔ | - |
| slugify | Transforms a text into a representation suitable to be used in an URL. | - | ✔ | - |
| mask | Formats the given text with the mask specified. | for '12345G' with mask '__ ___/_' produces '12 345/G' | ✔ | - |
| wordWrap | Truncate a string to the closest word boundary after a number of characters. | - | ✔ | - |
| messageFormatInstance | Returns an ICU based MessageFormat instance for the current thread. | - | - | ✔ |
| replaceSupplementary | Replaces characters outside the Basic Multilingual Plane with their name. | 'SMILING FACE WITH SMILING EYES' for the corresponding Emoji char | ✔ | ✔ |

h2. Extensible Message Formats

If you want to plug in your own formats then place a @META-INF/services/humanize.spi.FormatProvider@ file inside your jar. This file must contain a list of the full qualified class names of your @FormatProvider@ implementations, separated by carriage return. Also, you can register manually your format factories on the message formatter.

h2. The Unified Code for Units of Measure (UCUM)

Humanize provides a module called *humanize-ucum* that adds JSR-275* support.

Usage:

Declare the Maven dependency

bc.. <dependency>
  <groupId>com.github.mfornos</groupId>
  <artifactId>humanize-ucum</artifactId>
  <version>${humanize.version}</version>
</dependency>

p. ... and format some messages

bc.. Humanize.format("Hello from measures at {0, measure}", Measure.valueOf(150, NonSI.MILES_PER_HOUR)); 
// == "Hello from measures at 150 mph"

p. * _This will be replaced by Units of Measurement API when it is available in Maven central repo._ 

h2. Supported languages

All languages supported by the ICU APIs.

For capabilities not backed by ICU there are support for 'en' and 'es'.


h2. Epilog

Have fun and stay fresh!

